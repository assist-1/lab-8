//
//  main.cpp
//  laba8
//
//  Created by Влада Дрозда on 13.12.2022.
//

#include <iostream>
#include <vector>
#include <string>
#include <iterator>

bool suit(int64_t i, int64_t j,int64_t j1, std::vector <std::vector<int64_t>>& vec){
    if(vec[i][j] == 0) return 0;
    if(i==1 and j<j1){
        if(vec[0][j-1]==1 or vec[0][j]==1 or vec[0][j+1]==1 or vec[2][j-1]==1) return 1;
        else if (vec[3][j]==1) return 1;
        else if (vec[1][j+2]==1) return 1;
    }
    if(i==1 and j==j1){
        if(vec[0][j-1]==1 or vec[0][j]==1 or vec[0][j+1]==1) return 1;
        else if(vec[3][j-1] == 1 or vec[3][j+1]) return 1;
    }
    if(i==1 and j>j1){
        if(vec[0][j-1]==1 or vec[0][j]==1 or vec[0][j+1]==1 or vec[2][j+1] == 1) return 1;
        else if (vec[3][j]==1) return 1;
        else if (vec[1][j-2]==1) return 1;
    }
    if(i==3 and j<j1){
        if(vec[4][j-1]==1 or vec[4][j]==1 or vec[4][j+1]==1 or vec[2][j-1]==1) return 1;
        else if (vec[1][j]==1) return 1;
        else if (vec[3][j+2]==1) return 1;
    }
    if(i==3 and j==j1){
        if(vec[4][j-1]==1 or vec[4][j]==1 or vec[4][j+1]==1) return 1;
        else if(vec[1][j-1] == 1 or vec[1][j+1]) return 1;
    }
    if(i==3 and j>j1){
        if(vec[4][j-1]==1 or vec[4][j]==1 or vec[4][j+1]==1 or vec[2][j+1] == 1) return 1;
        else if (vec[1][j]==1) return 1;
        else if (vec[3][j-2]==1) return 1;
    }
    return 0;
}
void resh(int64_t p, std::vector<bool>& prime){
    prime[0] = prime[1] = false;
    for (int64_t i=2; i<=p; ++i){
        if (prime[i]){
            for (int64_t j=2*i; j<=p; j+=i){
                prime[j] = false;
            }
        }
    }
}

int64_t b(int64_t n){
    int64_t res = 0;
    int64_t begin1 = (n-2)*(n-1-2)/2 + 1;
    std::vector <std::vector<int64_t>> vec(5, std::vector<int64_t>(n+2,0));
    for (int64_t i = 0; i <5; ++i){
        int64_t t = n-2;
        for(int64_t j = 0; j < n+2; ++j){
            if (j < i+t) vec[i][j] = begin1 + j;

        }
        begin1 += n - 2;
        begin1 += i;
        t++;
    }
    
    int64_t p = vec[4][n+1];
    std::vector<bool> prime(p+1, true);
    resh(p, prime);
    std::cout << "\n";
    std::vector <std::vector<int64_t>> vec2(5, std::vector<int64_t>(n+2,0));
    vec2 = vec;
    for (int64_t i = 0; i < 5; ++i){
        for(int64_t j = 0; j < n+2; ++j){
            int64_t m = vec[i][j];
            if(prime[m] == false) vec[i][j] = 0;
            else vec[i][j] = 1;
        }
    }
    
    
    for(int64_t j = 2; j < n; ++j){
        
        if(vec[2][j] == 1){
            if(suit(1,j-1,j,vec)) res+= vec2[2][j];
            else if(suit(1,j,j,vec)) res+= vec2[2][j];
            else if(suit(1,j+1,j,vec)) res+= vec2[2][j];
            else if(suit(3,j-1,j,vec)) res+= vec2[2][j];
            else if(suit(3,j,j,vec)) res+= vec2[2][j];
            else if(suit(3,j+1,j,vec)) res+= vec2[2][j];
        }
    }
    
    if(vec[2][0] == 1){
        if(suit(1,1,0,vec) or suit(3,1,0,vec)) res+=vec2[2][0];
        else if(vec[1][0] == 1 and vec[0][0] == 1) res+=vec2[2][0];
        else if(vec[1][0] == 1 and vec[0][1] == 1) res+=vec2[2][0];
        else if(vec[3][0] == 1 and vec[4][0] == 1) res+=vec2[2][0];
        else if(vec[3][0] == 1 and vec[4][1] == 1) res+=vec2[2][0];
        }
    else if(vec[2][1] == 1){
        if(suit(1,1,0,vec) or suit(3,1,0,vec) or suit(1,2,1,vec)==1 or suit(3,2,1,vec)) res+=vec2[2][1];
        else if(vec[1][0] == 1 and vec[0][0] == 1) res+=vec2[2][1];
        else if(vec[1][0] == 1 and vec[0][1] == 1) res+=vec2[2][1];
        else if(vec[3][0] == 1 and vec[4][0] == 1) res+=vec2[2][1];
        else if(vec[3][0] == 1 and vec[4][1] == 1) res+=vec2[2][1];
    }
    

    return res;
}
int main(){
    int64_t b1 = b(5678027);
    int64_t b2 = b(7208785);
    int64_t b3 = b1 + b2;
    std::cout << b3 << "\n" << "\n";
}
